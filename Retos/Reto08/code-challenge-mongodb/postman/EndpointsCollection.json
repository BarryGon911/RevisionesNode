{
  "info": {
    "_postman_id": "a2a1f3e8-7e34-4b8a-8d7d-bf0a9d9f0e01",
    "name": "Code Challenge MongoDB — Endpoints (hardcoded /resenas)",
    "description": "Coleccion de pruebas para Autores, Usuarios, Libros y Reseñas.\n• Usa {{baseUrl}} (ej. http://localhost:3000/....)\n• IDs se guardan en variables de colección.\n• Filtros opcionales en GET /libros.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:3000/...." },
    { "key": "autorId", "value": "" },
    { "key": "usuarioId", "value": "" },
    { "key": "libroId", "value": "" },
    { "key": "resenaId", "value": "" },
    { "key": "newTitulo", "value": "" },
    { "key": "newAutorNombre", "value": "" },
    { "key": "newUsuarioEmail", "value": "" },
    { "key": "genero", "value": "" },
    { "key": "anio", "value": "" },
    { "key": "autor", "value": "" }
  ],
  "item": [
    {
      "name": "Autores",
      "item": [
        {
          "name": "GET /autores — listar",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/autores", "host": ["{{baseUrl}}"], "path": ["autores"] }
          },
          "event": [
            {
              "listen": "test",
              "script": { "exec": [
                "pm.test('Status 200', () => pm.response.code === 200);",
                "pm.test('JSON', () => /json/i.test(pm.response.headers.get('Content-Type')||''));",
                "let data=[]; try{data=pm.response.json()}catch(e){}",
                "pm.test('Array', () => Array.isArray(data));"
              ]}
            }
          ]
        },
        {
          "name": "POST /autores — crear",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/autores", "host": ["{{baseUrl}}"], "path": ["autores"] },
            "body": { "mode": "raw", "raw": "{\n  \"nombre\": \"{{newAutorNombre}}\",\n  \"nacionalidad\": \"Prueba\",\n  \"fechaNacimiento\": \"1980-01-01\"\n}" }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [
              "pm.collectionVariables.set('newAutorNombre','Autor Prueba '+Date.now());"
            ]}},
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 201|200', () => [200,201].includes(pm.response.code));",
              "let b={}; try{b=pm.response.json()}catch(e){}",
              "const id=b._id||b.id||(b.data&&(b.data._id||b.data.id));",
              "pm.test('Crea autor', () => !!id);",
              "if(id) pm.collectionVariables.set('autorId', id);"
            ]}}
          ]
        },
        {
          "name": "GET /autores/:id — obtener",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/autores/{{autorId}}", "host": ["{{baseUrl}}"], "path": ["autores","{{autorId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);",
              "let d={}; try{d=pm.response.json()}catch(e){}",
              "pm.test('Tiene _id y nombre', () => !!(d && (d._id||d.id) && d.nombre));"
            ]}}
          ]
        },
        {
          "name": "PUT /autores/:id — actualizar",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/autores/{{autorId}}", "host": ["{{baseUrl}}"], "path": ["autores","{{autorId}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"nacionalidad\": \"Actualizada\"\n}" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        },
        {
          "name": "DELETE /autores/:id — eliminar",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/autores/{{autorId}}", "host": ["{{baseUrl}}"], "path": ["autores","{{autorId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        }
      ]
    },
    {
      "name": "Usuarios",
      "item": [
        {
          "name": "GET /usuarios — listar",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/usuarios", "host": ["{{baseUrl}}"], "path": ["usuarios"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);",
              "pm.test('JSON', () => /json/i.test(pm.response.headers.get('Content-Type')||''));",
              "let data=[]; try{data=pm.response.json()}catch(e){}",
              "pm.test('Array', () => Array.isArray(data));"
            ]}}
          ]
        },
        {
          "name": "POST /usuarios — crear",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/usuarios", "host": ["{{baseUrl}}"], "path": ["usuarios"] },
            "body": { "mode": "raw", "raw": "{\n  \"nombre\": \"Usuario Prueba\",\n  \"email\": \"{{newUsuarioEmail}}\",\n  \"password\": \"pwd12345\"\n}" }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [
              "pm.collectionVariables.set('newUsuarioEmail','user'+Date.now()+'@mail.com');"
            ]}},
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 201|200', () => [200,201].includes(pm.response.code));",
              "let b={}; try{b=pm.response.json()}catch(e){}",
              "const id=b._id||b.id||(b.data&&(b.data._id||b.data.id));",
              "pm.test('Crea usuario', () => !!id);",
              "if(id) pm.collectionVariables.set('usuarioId', id);"
            ]}}
          ]
        },
        {
          "name": "GET /usuarios/:id — obtener",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/usuarios/{{usuarioId}}", "host": ["{{baseUrl}}"], "path": ["usuarios","{{usuarioId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);",
              "let d={}; try{d=pm.response.json()}catch(e){}",
              "pm.test('Tiene _id y nombre', () => !!(d && (d._id||d.id) && d.nombre));"
            ]}}
          ]
        },
        {
          "name": "PUT /usuarios/:id — actualizar",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/usuarios/{{usuarioId}}", "host": ["{{baseUrl}}"], "path": ["usuarios","{{usuarioId}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"nombre\": \"Usuario Actualizado\"\n}" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        },
        {
          "name": "DELETE /usuarios/:id — eliminar",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/usuarios/{{usuarioId}}", "host": ["{{baseUrl}}"], "path": ["usuarios","{{usuarioId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        }
      ]
    },
    {
      "name": "Libros",
      "item": [
        {
          "name": "GET /libros — listar",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/libros", "host": ["{{baseUrl}}"], "path": ["libros"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);",
              "pm.test('JSON', () => /json/i.test(pm.response.headers.get('Content-Type')||''));",
              "let data; try{data=pm.response.json()}catch(e){data=null}",
              "pm.test('Devuelve un array', () => Array.isArray(data));",
              "if(Array.isArray(data)&&data.length>0){",
              "  const b=data[0];",
              "  pm.test('Item tiene _id y titulo', () => !!(b && (b._id||b.id) && b.titulo));",
              "  const autorRef=(b.autorId)||(b.autor&&b.autor._id)||null;",
              "  if(autorRef) pm.collectionVariables.set('autorId', autorRef);",
              "}"
            ]}}
          ]
        },
        {
          "name": "POST /libros — crear",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/libros", "host": ["{{baseUrl}}"], "path": ["libros"] },
            "body": { "mode": "raw", "raw": "{\n  \"titulo\": \"{{newTitulo}}\",\n  \"anio\": 2001,\n  \"genero\": \"Ficción\",\n  \"autorId\": \"{{autorId}}\"\n}" }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [
              "pm.collectionVariables.set('newTitulo','Libro de prueba '+Date.now());",
              "if(!pm.collectionVariables.get('autorId')){",
              "  const baseUrl=pm.variables.get('baseUrl')||pm.collectionVariables.get('baseUrl');",
              "  pm.sendRequest({url: baseUrl+'/autores', method:'GET'}, (err,res)=>{",
              "    try{const arr=res&&res.json?res.json():[];",
              "      if(Array.isArray(arr)&&arr.length>0){",
              "        const a=arr[0]; const id=a._id||a.id; if(id) pm.collectionVariables.set('autorId', id);",
              "      }",
              "    }catch(e){}",
              "  });",
              "}"
            ]}},
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 201|200', () => [200,201].includes(pm.response.code));",
              "let b={}; try{b=pm.response.json()}catch(e){}",
              "const id=b._id||b.id||(b.data&&(b.data._id||b.data.id));",
              "pm.test('Devuelve libro creado', () => !!id);",
              "if(id) pm.collectionVariables.set('libroId', id);"
            ]}}
          ]
        },
        {
          "name": "GET /libros/:id — obtener",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/libros/{{libroId}}", "host": ["{{baseUrl}}"], "path": ["libros","{{libroId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);",
              "let d={}; try{d=pm.response.json()}catch(e){}",
              "pm.test('Tiene _id y titulo', () => !!(d && (d._id||d.id) && d.titulo));",
              "pm.test('Incluye autor o autorId', () => !!(d.autorId || d.autor));"
            ]}}
          ]
        },
        {
          "name": "PUT /libros/:id — actualizar",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/libros/{{libroId}}", "host": ["{{baseUrl}}"], "path": ["libros","{{libroId}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"genero\": \"Ensayo\",\n  \"anio\": 2002\n}" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        },
        {
          "name": "DELETE /libros/:id — eliminar",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/libros/{{libroId}}", "host": ["{{baseUrl}}"], "path": ["libros","{{libroId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        },
        {
          "name": "GET /libros — filtros opcionales",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": {
              "raw": "{{baseUrl}}/libros?genero={{genero}}&anio={{anio}}&autor={{autor}}",
              "host": ["{{baseUrl}}"],
              "path": ["libros"],
              "query": [
                { "key": "genero", "value": "{{genero}}" },
                { "key": "anio", "value": "{{anio}}" },
                { "key": "autor", "value": "{{autor}}" }
              ]
            }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);"
            ]}}
          ]
        },
        {
          "name": "GET /libros/stats — opcional",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/libros/stats", "host": ["{{baseUrl}}"], "path": ["libros","stats"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);"
            ]}}
          ]
        }
      ]
    },
    {
      "name": "Reseñas",
      "item": [
        {
          "name": "GET /resenas — listar",
          "request": {
            "method": "GET",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/resenas", "host": ["{{baseUrl}}"], "path": ["resenas"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);",
              "pm.test('JSON', () => /json/i.test(pm.response.headers.get('Content-Type')||''));",
              "let data=[]; try{data=pm.response.json()}catch(e){}",
              "pm.test('Array', () => Array.isArray(data));"
            ]}}
          ]
        },
        {
          "name": "POST /resenas — crear",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{baseUrl}}/resenas", "host": ["{{baseUrl}}"], "path": ["resenas"] },
            "body": { "mode": "raw", "raw": "{\n  \"comentario\": \"Muy buena\",\n  \"puntuacion\": 5,\n  \"fecha\": \"2025-08-20\",\n  \"libroId\": \"{{libroId}}\",\n  \"usuarioId\": \"{{usuarioId}}\"\n}" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 201|200', () => [200,201].includes(pm.response.code));",
              "let b={}; try{b=pm.response.json()}catch(e){}",
              "const id=b._id||b.id||(b.data&&(b.data._id||b.data.id));",
              "pm.test('Crea reseña', () => !!id);",
              "if(id) pm.collectionVariables.set('resenaId', id);"
            ]}}
          ]
}