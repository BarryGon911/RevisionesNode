{
  "info": {
    "_postman_id": "b7a6f9c0-0c3d-4b9a-8c4c-3a3e3b1a5e21",
    "name": "Code Challenge MongoDB — Runner (CRUD end-to-end, /resenas)",
    "description": "Crea Autor, Usuario, Libro; verifica; crea y verifica Reseña; actualiza y elimina.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:3000/...." },
    { "key": "autorId", "value": "" },
    { "key": "usuarioId", "value": "" },
    { "key": "libroId", "value": "" },
    { "key": "resenaId", "value": "" },
    { "key": "newAutorNombre", "value": "" },
    { "key": "newUsuarioEmail", "value": "" },
    { "key": "newTitulo", "value": "" },
    { "key": "today", "value": "" }
  ],
  "item": [
    {
      "name": "Runner — Flujo CRUD",
      "event": [
        { "listen": "prerequest", "script": { "exec": [
          "pm.collectionVariables.set('today', new Date().toISOString().slice(0,10));"
        ]}}
      ],
      "item": [
        {
          "name": "1) POST /autores — crear",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"nombre\": \"{{newAutorNombre}}\",\n  \"nacionalidad\": \"Runner\",\n  \"fechaNacimiento\": \"1985-05-05\"\n}" },
            "url": { "raw": "{{baseUrl}}/autores", "host": ["{{baseUrl}}"], "path": ["autores"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [
              "pm.collectionVariables.set('newAutorNombre','Autor Runner '+Date.now());"
            ]}},
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 201|200', () => [200,201].includes(pm.response.code));",
              "let b={}; try{b=pm.response.json()}catch(e){}",
              "const id=b._id||b.id||(b.data&&(b.data._id||b.data.id));",
              "pm.test('Crea autor', () => !!id);",
              "if(id) pm.collectionVariables.set('autorId', id);"
            ]}}
          ]
        },
        {
          "name": "2) POST /usuarios — crear",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"nombre\": \"Usuario Runner\",\n  \"email\": \"{{newUsuarioEmail}}\",\n  \"password\": \"pwdRunner123\"\n}" },
            "url": { "raw": "{{baseUrl}}/usuarios", "host": ["{{baseUrl}}"], "path": ["usuarios"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [
              "pm.collectionVariables.set('newUsuarioEmail','runner'+Date.now()+'@mail.com');"
            ]}},
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 201|200', () => [200,201].includes(pm.response.code));",
              "let b={}; try{b=pm.response.json()}catch(e){}",
              "const id=b._id||b.id||(b.data&&(b.data._id||b.data.id));",
              "pm.test('Crea usuario', () => !!id);",
              "if(id) pm.collectionVariables.set('usuarioId', id);"
            ]}}
          ]
        },
        {
          "name": "3) POST /libros — crear",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"titulo\": \"{{newTitulo}}\",\n  \"anio\": 2024,\n  \"genero\": \"Ficción\",\n  \"autorId\": \"{{autorId}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/libros", "host": ["{{baseUrl}}"], "path": ["libros"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [
              "pm.collectionVariables.set('newTitulo','Libro Runner '+Date.now());"
            ]}},
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 201|200', () => [200,201].includes(pm.response.code));",
              "let b={}; try{b=pm.response.json()}catch(e){}",
              "const id=b._id||b.id||(b.data&&(b.data._id||b.data.id));",
              "pm.test('Crea libro', () => !!id);",
              "if(id) pm.collectionVariables.set('libroId', id);"
            ]}}
          ]
        },
        {
          "name": "4) GET /libros/:id — verificar",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/libros/{{libroId}}", "host": ["{{baseUrl}}"], "path": ["libros","{{libroId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);",
              "let d={}; try{d=pm.response.json()}catch(e){}",
              "pm.test('Tiene _id y titulo', () => !!(d && (d._id||d.id) && d.titulo));"
            ]}}
          ]
        },
        {
          "name": "5) POST /resenas — crear",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"comentario\": \"Excelente\",\n  \"puntuacion\": 5,\n  \"fecha\": \"{{today}}\",\n  \"libroId\": \"{{libroId}}\",\n  \"usuarioId\": \"{{usuarioId}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/resenas", "host": ["{{baseUrl}}"], "path": ["resenas"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 201|200', () => [200,201].includes(pm.response.code));",
              "let b={}; try{b=pm.response.json()}catch(e){}",
              "const id=b._id||b.id||(b.data&&(b.data._id||b.data.id));",
              "pm.test('Crea reseña', () => !!id);",
              "if(id) pm.collectionVariables.set('resenaId', id);"
            ]}}
          ]
        },
        {
          "name": "6) GET /resenas/:id — verificar",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/resenas/{{resenaId}}", "host": ["{{baseUrl}}"], "path": ["resenas","{{resenaId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200', () => pm.response.code===200);"
            ]}}
          ]
        },
        {
          "name": "7) PUT /libros/:id — actualizar",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"genero\": \"Ensayo\",\n  \"anio\": 2025\n}" },
            "url": { "raw": "{{baseUrl}}/libros/{{libroId}}", "host": ["{{baseUrl}}"], "path": ["libros","{{libroId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        },
        {
          "name": "8) DELETE /resenas/:id — eliminar",
          "request": {
            "method": "DELETE",
            "url": { "raw": "{{baseUrl}}/resenas/{{resenaId}}", "host": ["{{baseUrl}}"], "path": ["resenas","{{resenaId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        },
        {
          "name": "9) DELETE /libros/:id — eliminar",
          "request": {
            "method": "DELETE",
            "url": { "raw": "{{baseUrl}}/libros/{{libroId}}", "host": ["{{baseUrl}}"], "path": ["libros","{{libroId}}"] }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));"
            ]}}
          ]
        },
        {
          "name": "10) DELETE /usuarios/:id — eliminar",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/usuarios/{{usuarioId}}", "host": ["{{baseUrl}}"], "path": ["usuarios","{{usuarioId}}"] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));" ] } } ]
        },
        {
          "name": "11) DELETE /autores/:id — eliminar",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/autores/{{autorId}}", "host": ["{{baseUrl}}"], "path": ["autores","{{autorId}}"] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200|204', () => [200,204].includes(pm.response.code));" ] } } ]
        }
      ]
    }
  ]
}