name: API Tests

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Modo: remote (usa TEST_BASEURL) o local (levanta Mongo + API)"
        required: true
        default: "remote"
        type: choice
        options: [remote, local]
      baseUrl:
        description: "SÃ³lo para 'remote': URL completa (https://dev.tuapi.com/api)"
        required: false
        type: string
      port:
        description: "SÃ³lo para 'local': puerto de la API"
        required: true
        default: "4000"
        type: string

# Permisos para Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  newman-remote:
    if: ${{ inputs.mode == 'remote' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Newman + reporter
        run: |
          npm i -D newman newman-reporter-htmlextra

      - name: Prepare environment (override baseUrl)
        run: |
          mkdir -p reports
          TARGET_URL="${{ inputs.baseUrl != '' && inputs.baseUrl || secrets.TEST_BASEURL }}"
          if [ -z "$TARGET_URL" ]; then
            echo "TEST_BASEURL no definido (secret) ni baseUrl (input)."
            exit 1
          fi
          cat postman/Ecommerce.baseUrl.environment.json \
            | node -e "let env=require('fs').readFileSync(0,'utf8'); env=JSON.parse(env); env.values=env.values.map(v=>v.key==='baseUrl'?({...v,value:'$TARGET_URL'}):v); console.log(JSON.stringify(env,null,2));" \
            > reports/env.runtime.json
          cat reports/env.runtime.json

      - name: Run Newman
        run: |
          npx newman run "postman/Ecommerce.baseUrl.fullrunner.max.postman_collection.json" \
            -e "reports/env.runtime.json" \
            -r cli,htmlextra,json \
            --reporter-htmlextra-export "reports/Ecommerce-api-report.html" \
            --reporter-htmlextra-title "Ecommerce API Test Report" \
            --reporter-json-export "reports/Ecommerce-api-report.json" \
            --delay-request 200

      - name: Generate Compliance
        run: |
          node scripts/generateCompliance.js "reports/Ecommerce-api-report.json"

      - name: Upload reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: reports/

  newman-local:
    if: ${{ inputs.mode == 'local' }}
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    env:
      PORT: ${{ inputs.port }}
      MONGODB_URI: mongodb://localhost:27017/ecommerce_express_api
      JWT_SECRET: testsecret

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install project deps
        run: |
          npm ci || npm i

      - name: Seed database (best effort)
        run: |
          if npm run -s unseed:all >/dev/null 2>&1; then npm run unseed:all; else node --env-file=.env src/seeders/unseed.js --all || true; fi
          if npm run -s seed >/dev/null 2>&1; then npm run seed; else node --env-file=.env src/seeders/seed.js || true; fi

      - name: Start API
        run: |
          nohup node src/server.js > server.log 2>&1 &
          for i in {1..60}; do
            curl -fsS "http://localhost:${PORT}/api/docs" >/dev/null && break
            sleep 2
          done
          curl -fsS "http://localhost:${PORT}/api/docs" >/dev/null || (echo "API no respondiÃ³ a tiempo" && tail -n 200 server.log && exit 1)

      - name: Install Newman + reporter
        run: |
          npm i -D newman newman-reporter-htmlextra

      - name: Prepare environment (local baseUrl)
        run: |
          mkdir -p reports
          TARGET_URL="http://localhost:${PORT}/api"
          cat postman/Ecommerce.baseUrl.environment.json \
            | node -e "let env=require('fs').readFileSync(0,'utf8'); env=JSON.parse(env); env.values=env.values.map(v=>v.key==='baseUrl'?({...v,value:'$TARGET_URL'}):v); console.log(JSON.stringify(env,null,2));" \
            > reports/env.runtime.json
          cat reports/env.runtime.json

      - name: Run Newman
        run: |
          npx newman run "postman/Ecommerce.baseUrl.fullrunner.max.postman_collection.json" \
            -e "reports/env.runtime.json" \
            -r cli,htmlextra,json \
            --reporter-htmlextra-export "reports/Ecommerce-api-report.html" \
            --reporter-htmlextra-title "Ecommerce API Test Report" \
            --reporter-json-export "reports/Ecommerce-api-report.json" \
            --delay-request 200

      - name: Generate Compliance
        run: |
          node scripts/generateCompliance.js "reports/Ecommerce-api-report.json"

      - name: Upload reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: reports/

  publish-pages:
    needs: [newman-remote, newman-local]
    # Publica sÃ³lo si alguno de los tests pasÃ³ y el repo es pÃºblico
    if: ${{ (needs.newman-remote.result == 'success' || needs.newman-local.result == 'success') && github.repository_visibility == 'public' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download reports artifact
        uses: actions/download-artifact@v4
        with:
          name: api-test-reports
          path: public

      - name: Build index.html
        shell: bash
        run: |
          mkdir -p public
          DATE="$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          cat > public/index.html <<EOF
          <!doctype html>
          <html lang="es">
          <head>
            <meta charset="utf-8">
            <title>Ecommerce API â€” Test Reports</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; padding: 2rem; line-height: 1.6; }
              h1 { margin-top: 0; }
              a { text-decoration: none; }
              .card { border: 1px solid #e5e7eb; border-radius: 12px; padding: 1rem 1.25rem; margin: 0.75rem 0; }
              .muted { color: #6b7280; }
            </style>
          </head>
          <body>
            <h1>ðŸ“Š Ecommerce API â€” Test Reports</h1>
            <p class="muted">Ãšltima ejecuciÃ³n: $DATE</p>
            <div class="card">
              <h3>Reporte HTML (Newman)</h3>
              <p><a href="./Ecommerce-api-report.html">Abrir Ecommerce-api-report.html</a></p>
            </div>
            <div class="card">
              <h3>Compliance (Markdown)</h3>
              <p><a href="./Compliance-Postman.md">Abrir Compliance-Postman.md</a></p>
            </div>
            <div class="card">
              <h3>Reporte JSON (Newman)</h3>
              <p><a href="./Ecommerce-api-report.json">Descargar JSON</a></p>
            </div>
          </body>
          </html>
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
