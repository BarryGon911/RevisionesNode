{
  "info": {
    "name": "Ecommerce API — Full Runner MAX (baseUrl)",
    "_postman_id": "a934606d-89e6-4f54-be7d-3f879e00975f",
    "description": "Runner integral alineado con OpenAPI. Cubre Auth, Categories, Products, Cart, Orders y Users, con pruebas positivas y negativas.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register (random user)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"RunnerUser\",\n  \"email\": \"{{new_email}}\",\n  \"password\": \"password123\",\n  \"role\": \"customer\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('new_email', `runner+${Date.now()}@example.com`);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json(); pm.expect(json).to.have.property('user');",
                  "pm.environment.set('reg_email', pm.environment.get('new_email'));"
                ]
              }
            }
          ]
        },
        {
          "name": "Register (duplicate email) -> 400",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"RunnerUser\",\n  \"email\": \"{{reg_email}}\",\n  \"password\": \"password123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('400 Bad Request (duplicate)', () => pm.response.to.have.status(400));"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (new user)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{reg_email}}\",\n  \"password\": \"password123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; pm.expect(json).to.have.property('token');",
                  "pm.environment.set('userToken', json.token); pm.environment.set('token', json.token);"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (wrong password) -> 400",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{reg_email}}\",\n  \"password\": \"wrongpass\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('400 Bad Request (invalid creds)', () => pm.response.to.have.status(400));"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"password123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; pm.expect(json).to.have.property('token');",
                  "pm.environment.set('adminToken', json.token);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "GET /categories (public)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; const items = Array.isArray(json)? json : (json.data||[]);",
                  "pm.environment.set('catId', (items[0] && (items[0]._id || items[0].id)) || '');",
                  "pm.test('>= 10 categorías (si seed rúbrica)', () => pm.expect(items.length >= 10).to.be.true);"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /categories (admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Cat Runner\",\n  \"description\": \"Creada por runner\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('adminToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', () => pm.response.to.have.status(201));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; const id=json._id||json.id; if(id) pm.environment.set('catNewId', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT /categories/{id} (admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/categories/{{catNewId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "{{catNewId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Cat Runner (edit)\",\n  \"description\": \"Editada por runner\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('adminToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /categories/{id} (admin)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/{{catNewId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "{{catNewId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('adminToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('204 No Content', () => pm.response.to.have.status(204));"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /categories (user) -> 401/403",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Cat Should Fail\",\n  \"description\": \"Debe fallar con user token\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('userToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized/Forbidden', () => pm.expect([401,403]).to.include(pm.response.code));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "GET /products (public)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; const items = Array.isArray(json)? json : (json.data||[]);",
                  "pm.environment.set('prodId', (items[0] && (items[0]._id || items[0].id)) || '');",
                  "pm.test('Array o paginado', () => pm.expect(Array.isArray(items)).to.be.true);",
                  "pm.test('>= 10 productos (si seed rúbrica)', () => pm.expect(items.length >= 10).to.be.true);"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /products/{id} (public)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{prodId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{prodId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /products?page=1&limit=10 (public)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products?page=1&limit=10"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "let json={}; try{json=pm.response.json()}catch(e){};",
                  "// acepta array (no-paginado) o estructura paginada",
                  "if (Array.isArray(json)) { pm.expect(json.length).to.be.at.most(10); }",
                  "else { pm.expect(json).to.have.keys(['page','limit','total','data']); }"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /products (admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Producto Runner\",\n  \"description\": \"Creado por runner\",\n  \"price\": 199.99,\n  \"stock\": 25,\n  \"category\": \"{{catId}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('adminToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', () => pm.response.to.have.status(201));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; const id=json._id||json.id; if(id) pm.environment.set('prodNewId', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT /products/{id} (admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/{{prodNewId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{prodNewId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Producto Runner (edit)\",\n  \"description\": \"Editado por runner\",\n  \"price\": 149.99,\n  \"stock\": 20,\n  \"category\": \"{{catId}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('adminToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /products/{id} (admin)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{prodNewId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{prodNewId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('adminToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('204 No Content', () => pm.response.to.have.status(204));"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /products (user) -> 401/403",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Debe fallar\",\n  \"price\": 10,\n  \"stock\": 1,\n  \"category\": \"{{catId}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('userToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized/Forbidden', () => pm.expect([401,403]).to.include(pm.response.code));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Cart & Orders",
      "item": [
        {
          "name": "GET /cart (user)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cart",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cart"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('userToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /cart (add item) (user)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/cart",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cart"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product\": \"{{prodId}}\",\n  \"quantity\": 2\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('userToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "PATCH /cart/items/{productId} (user)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/cart/items/{{prodId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cart",
                "items",
                "{{prodId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 3\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('userToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /cart/items/{productId} (user)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cart/items/{{prodId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cart",
                "items",
                "{{prodId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('userToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('204 No Content', () => pm.response.to.have.status(204));"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /orders (user)",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('userToken'));",
                  "// Garantiza que haya al menos 1 item en el cart",
                  "pm.sendRequest({ url: pm.environment.get('baseUrl') + '/cart', method: 'POST', header: { 'Content-Type':'application/json', 'Authorization': 'Bearer ' + pm.environment.get('userToken') }, body: { mode:'raw', raw: JSON.stringify({ product: pm.environment.get('prodId'), quantity: 1 }) } }, function(){});"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', () => pm.response.to.have.status(201));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; pm.environment.set('orderId', json._id || json.id || '');"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /orders (user)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('userToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; pm.test('Array de órdenes', () => pm.expect(Array.isArray(json)).to.be.true);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users (admin)",
      "item": [
        {
          "name": "GET /users?page=1&limit=10 (admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users?page=1&limit=10"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set('token', pm.environment.get('adminToken'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', () => pm.response.to.have.status(200));",
                  "let json={}; try{json=pm.response.json()}catch(e){}; pm.test('Estructura paginada', () => pm.expect(json).to.have.keys(['page','limit','total','data']));",
                  "if (json.total !== undefined) pm.test('>= 10 usuarios (si seed rúbrica)', () => pm.expect(json.total >= 10).to.be.true);"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}