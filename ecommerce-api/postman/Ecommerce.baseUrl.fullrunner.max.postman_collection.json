{
  "info": {
    "name": "Ecommerce API — Full Runner MAX (baseUrl)",
    "_postman_id": "2b6d1c1e-0000-4444-8888-aaaaaaaa9999",
    "description": "Runner E2E: Auth, Categories, Products, Cart, Orders y Users. Usa {{baseUrl}} y bearer {{token}}. Admin vía {{adminEmail}}/{{adminPassword}} (o variables propagadas desde .env por env-from-dotenv.js).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      { "key": "token", "value": "{{token}}", "type": "string" }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Defaults por si tu env no aporta adminEmail/adminPassword",
          "if(!pm.environment.get('adminEmail')) pm.environment.set('adminEmail','admin@example.com');",
          "if(!pm.environment.get('adminPassword')) pm.environment.set('adminPassword','password123');"
        ]
      }
    }
  ],
  "variable": [
    { "key": "token", "value": "" },
    { "key": "userToken", "value": "" },
    { "key": "adminToken", "value": "" },
    { "key": "new_email", "value": "" },
    { "key": "reg_email", "value": "" },
    { "key": "catId", "value": "" },
    { "key": "catNewId", "value": "" },
    { "key": "prodId", "value": "" },
    { "key": "prodNewId", "value": "" },
    { "key": "orderId", "value": "" }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register (random user)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"RunnerUser\",\n  \"email\": \"{{new_email}}\",\n  \"password\": \"password123\",\n  \"role\": \"customer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth","register"]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": [
              "pm.environment.set('new_email', `runner+${Date.now()}@example.com`);"
            ]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('201 Created', () => pm.response.to.have.status(201));",
              "const json = pm.response.json(); pm.expect(json).to.have.property('user');",
              "pm.environment.set('reg_email', pm.environment.get('new_email'));"
            ]}}
          ]
        },
        {
          "name": "Register (duplicate email) -> 400",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"RunnerUser\",\n  \"email\": \"{{reg_email}}\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth","register"]
            }
          },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('400 Bad Request (duplicate)', () => pm.response.to.have.status(400));"
            ]}}
          ]
        },
        {
          "name": "Login (new user)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{reg_email}}\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth","login"]
            }
          },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "let json={}; try{json=pm.response.json()}catch(e){}; pm.expect(json).to.have.property('token');",
              "pm.environment.set('userToken', json.token); pm.environment.set('token', json.token);"
            ]}}
          ]
        },
        {
          "name": "Login (wrong password) -> 400",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{reg_email}}\",\n  \"password\": \"wrongpass\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth","login"]
            }
          },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('400 Bad Request (invalid creds)', () => pm.response.to.have.status(400));"
            ]}}
          ]
        },
        {
          "name": "Login (admin)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth","login"]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": [
              "if(!pm.environment.get('adminEmail')) pm.environment.set('adminEmail','admin@example.com');",
              "if(!pm.environment.get('adminPassword')) pm.environment.set('adminPassword','password123');"
            ]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "let json={}; try{json=pm.response.json()}catch(e){}; pm.expect(json).to.have.property('token');",
              "pm.environment.set('adminToken', json.token);"
            ]}}
          ]
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "GET /categories (public)",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/categories", "host": ["{{baseUrl}}"], "path": ["categories"] } },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "let json={}; try{json=pm.response.json()}catch(e){};",
              "const items = Array.isArray(json)? json : (json.data||json.results||json.items||json.docs||[]);",
              "if (items && items.length) { const id = items[0]._id || items[0].id; if (id) pm.environment.set('catId', id); }",
              "pm.test('>= 10 categorías (si seed rúbrica)', () => pm.expect(items.length >= 10).to.be.true);"
            ]}}
          ]
        },
        {
          "name": "POST /categories (admin)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Cat Runner\",\n  \"description\": \"Creada por runner\"\n}" },
            "url": { "raw": "{{baseUrl}}/categories", "host": ["{{baseUrl}}"], "path": ["categories"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": [
              "pm.environment.set('token', pm.environment.get('adminToken'));"
            ]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('201 Created', () => pm.response.to.have.status(201));",
              "let json={}; try{json=pm.response.json()}catch(e){}; const id=json._id||json.id; if(id) pm.environment.set('catNewId', id);"
            ]}}
          ]
        },
        {
          "name": "PUT /categories/{id} (admin)",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Cat Runner (edit)\",\n  \"description\": \"Editada por runner\"\n}" },
            "url": { "raw": "{{baseUrl}}/categories/{{catNewId}}", "host": ["{{baseUrl}}"], "path": ["categories","{{catNewId}}"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('adminToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('200 OK', () => pm.response.to.have.status(200));"]}}
          ]
        },
        {
          "name": "DELETE /categories/{id} (admin)",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/categories/{{catNewId}}", "host": ["{{baseUrl}}"], "path": ["categories","{{catNewId}}"] } },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('adminToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('204 No Content', () => pm.response.to.have.status(204));"]}}
          ]
        },
        {
          "name": "POST /categories (user) -> 401/403",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Cat Should Fail\",\n  \"description\": \"Debe fallar con user token\"\n}" },
            "url": { "raw": "{{baseUrl}}/categories", "host": ["{{baseUrl}}"], "path": ["categories"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('userToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('Unauthorized/Forbidden', () => pm.expect([401,403]).to.include(pm.response.code));"]}}
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "GET /products (public)",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/products", "host": ["{{baseUrl}}"], "path": ["products"] } },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "let json={}; try{json=pm.response.json()}catch(e){};",
              "const items = Array.isArray(json)? json : (json.data||json.results||json.items||json.docs||[]);",
              "if (items && items.length) { const id = items[0]._id || items[0].id; if (id) pm.environment.set('prodId', id); }",
              "pm.test('Array o paginado', () => pm.expect(Array.isArray(items)).to.be.true);",
              "pm.test('>= 10 productos (si seed rúbrica)', () => pm.expect(items.length >= 10).to.be.true);"
            ]}}
          ]
        },
        {
          "name": "GET /products/{id} (public)",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/products/{{prodId}}", "host": ["{{baseUrl}}"], "path": ["products","{{prodId}}"] } },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('200 OK', () => pm.response.to.have.status(200));"]}}
          ]
        },
        {
          "name": "GET /products?page=1&limit=10 (public)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/products?page=1&limit=10", "host": ["{{baseUrl}}"], "path": ["products"], "query": [
              { "key": "page", "value": "1" }, { "key": "limit", "value": "10" }
            ]}
          },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "let json={}; try{json=pm.response.json()}catch(e){};",
              "if (Array.isArray(json)) { pm.expect(json.length).to.be.at.most(10); }",
              "else { pm.expect(json).to.have.property('page'); pm.expect(json).to.have.property('total'); pm.expect(json).to.have.any.keys('limit','perPage','pageSize'); pm.expect(json).to.have.any.keys('data','results','items','docs'); }"
            ]}}
          ]
        },
        {
          "name": "POST /products (admin)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Producto Runner\",\n  \"description\": \"Creado por runner\",\n  \"price\": 199.99,\n  \"stock\": 25,\n  \"category\": \"{{catId}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/products", "host": ["{{baseUrl}}"], "path": ["products"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('adminToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('201 Created', () => pm.response.to.have.status(201));",
              "let json={}; try{json=pm.response.json()}catch(e){}; const id=json._id||json.id; if(id) pm.environment.set('prodNewId', id);"
            ]}}
          ]
        },
        {
          "name": "PUT /products/{id} (admin)",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Producto Runner (edit)\",\n  \"description\": \"Editado por runner\",\n  \"price\": 149.99,\n  \"stock\": 20,\n  \"category\": \"{{catId}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/products/{{prodNewId}}", "host": ["{{baseUrl}}"], "path": ["products","{{prodNewId}}"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('adminToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('200 OK', () => pm.response.to.have.status(200));"]}}
          ]
        },
        {
          "name": "DELETE /products/{id} (admin)",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/products/{{prodNewId}}", "host": ["{{baseUrl}}"], "path": ["products","{{prodNewId}}"] } },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('adminToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('204 No Content', () => pm.response.to.have.status(204));"]}}
          ]
        },
        {
          "name": "POST /products (user) -> 401/403",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Debe fallar\",\n  \"price\": 10,\n  \"stock\": 1,\n  \"category\": \"{{catId}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/products", "host": ["{{baseUrl}}"], "path": ["products"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('userToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('Unauthorized/Forbidden', () => pm.expect([401,403]).to.include(pm.response.code));"]}}
          ]
        }
      ]
    },
    {
      "name": "Cart & Orders",
      "item": [
        {
          "name": "GET /cart (user)",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/cart", "host": ["{{baseUrl}}"], "path": ["cart"] } },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('userToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('200 OK', () => pm.response.to.have.status(200));"]}}
          ]
        },
        {
          "name": "POST /cart (add item) (user)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"productId\": \"{{prodId}}\",\n  \"quantity\": 2\n}" },
            "url": { "raw": "{{baseUrl}}/cart", "host": ["{{baseUrl}}"], "path": ["cart"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('userToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('200/201 OK', () => pm.expect([200,201]).to.include(pm.response.code));"
            ]}}
          ]
        },
        {
          "name": "PATCH /cart/{productId} (user)",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"quantity\": 3\n}" },
            "url": { "raw": "{{baseUrl}}/cart/{{prodId}}", "host": ["{{baseUrl}}"], "path": ["cart","{{prodId}}"] }
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('userToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('200 OK', () => pm.response.to.have.status(200));"]}}
          ]
        },
        {
          "name": "DELETE /cart/{productId} (user)",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/cart/{{prodId}}", "host": ["{{baseUrl}}"], "path": ["cart","{{prodId}}"] } },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('userToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": ["pm.test('204 No Content', () => pm.response.to.have.status(204));"]}}
          ]
        },
        {
          "name": "POST /orders (user)",
          "request": { "method": "POST", "url": { "raw": "{{baseUrl}}/orders", "host": ["{{baseUrl}}"], "path": ["orders"] } },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": [
              "pm.environment.set('token', pm.environment.get('userToken'));",
              "// Intentar garantizar 1 ítem en el carrito (best-effort).",
              "pm.sendRequest({",
              "  url: pm.environment.get('baseUrl') + '/cart',",
              "  method: 'POST',",
              "  header: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + pm.environment.get('userToken') },",
              "  body: { mode: 'raw', raw: JSON.stringify({ productId: pm.environment.get('prodId'), quantity: 1 }) }",
              "}, function(){});"
            ]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('201 Created', () => pm.response.to.have.status(201));",
              "let json={}; try{json=pm.response.json()}catch(e){}; pm.environment.set('orderId', json._id || json.id || '');"
            ]}}
          ]
        },
        {
          "name": "GET /orders (user)",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/orders", "host": ["{{baseUrl}}"], "path": ["orders"] } },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('userToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "let json={}; try{json=pm.response.json()}catch(e){}; pm.test('Array de órdenes', () => pm.expect(Array.isArray(json)).to.be.true);"
            ]}}
          ]
        }
      ]
    },
    {
      "name": "Users (admin)",
      "item": [
        {
          "name": "GET /users?page=1&limit=10 (admin)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/users?page=1&limit=10", "host": ["{{baseUrl}}"], "path": ["users"], "query": [
              { "key": "page", "value": "1" }, { "key": "limit", "value": "10" }
            ]}
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": ["pm.environment.set('token', pm.environment.get('adminToken'));"]}},
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('200 OK', () => pm.response.to.have.status(200));",
              "let json={}; try{json=pm.response.json()}catch(e){};",
              "pm.test('Estructura paginada', () => { pm.expect(json).to.have.property('page'); pm.expect(json).to.have.property('total'); pm.expect(json).to.have.any.keys('limit','perPage','pageSize'); pm.expect(json).to.have.any.keys('data','results','items','docs'); });",
              "if (json.total !== undefined) pm.test('>= 10 usuarios (si seed rúbrica)', () => pm.expect(json.total >= 10).to.be.true);"
            ]}}
          ]
        }
      ]
    }
  ]
}